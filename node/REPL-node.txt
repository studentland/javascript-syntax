
The "repl" - Read-Eval-Print-Loop (REPL) implementation.

const repl = require('repl');

The Node.js itself uses the repl module to provide
its own interactive interface for executing JavaScript.

Create and run multiple REPL instances
against a single running instance of Node.js that share
a single global object but have separate I/O interfaces.
https://nodejs.org/api/repl.html#starting-multiple-repl-instances-against-a-single-running-instance

While running, instances of repl.REPLServer will accept
individual lines of user input, evaluate those according to
a user-defined evaluation function, then output the result.
Input and output may be from stdin and stdout, respectively,
or may be connected to any Node.js stream.

Commands and special keys(supported by all REPL instances).
https://nodejs.org/api/repl.html#commands-and-special-keys

.break: When in the process of inputting a multi-line expression,
enter the .break command (or press Ctrl+C)
to abort further input or processing of that expression.
.clear: Resets the REPL context to an empty object
and clears any multi-line expression being input.
.exit: Close the I/O stream, causing the REPL to exit.
.help: Show this list of special commands.
.save: Save the current REPL session to a file: > .save ./file/to/save.js
.load: Load a file into the current REPL session. > .load ./file/to/load.js
.editor: Enter editor mode (Ctrl+D to finish, Ctrl+C to cancel).

Example(terminal: node=>"Enter"=>.editor=>"Enter"):
> .editor
// Entering editor mode (^D to finish, ^C to cancel)
function welcome(name) {
  return `Hello ${name}!`;
}

Tab: When pressed on a blank line, displays
global and local (scope) variables. When pressed while entering
other input, displays relevant autocompletion options.

For all other key bindings, see TTY keybindings.
https://nodejs.org/api/readline.html#tty-keybindings

Global and local scope.
https://nodejs.org/api/repl.html#global-and-local-scope

The default evaluator provides access to any variables
that exist in the global scope. It is possible to expose
a variable to the REPL explicitly by assigning it
to the context object associated with each REPLServer

Accessing core Node.js modules.
https://nodejs.org/api/repl.html#accessing-core-nodejs-modules

The default evaluator will automatically load Node.js core modules
into the REPL environment when used. F.e.
"> fs.createReadStream('./some/file');"
will be evaluated on-demand as "global.fs = require('fs');".

The REPL uses the "domain" module to catch
all uncaught exceptions for that REPL session.

The default evaluator will, by default, assign the result
of the most recently evaluated expression
to the special variable "_" (underscore).
Explicitly setting "_" to a value will disable this behavior.

Example:
> [ 'a', 'b', 'c' ]
[ 'a', 'b', 'c' ]
> _.length
3
> _ += 1
Expression assignment to _ now disabled.
4
> 1 + 1
2
> _
4


Support for the await keyword is enabled at the top level.

Example:
> await Promise.resolve(123)
123
> await Promise.reject(new Error('REPL await'))
Error: REPL await
    at repl:1:45
> const timeout = util.promisify(setTimeout);
undefined
> const old = Date.now(); await timeout(1000); console.log(Date.now() - old);
1002
undefined

One known limitation of using the await keyword in the REPL is that it will invalidate the lexical scoping of the const and let keywords.

Example:
> const m = await Promise.resolve(123)
undefined
> m
123
> const m = await Promise.resolve(234)
undefined
> m
234

When a new repl.REPLServer is created,
a custom evaluation function may be provided.


Customizing REPL output.
https://nodejs.org/api/repl.html#customizing-repl-output

By default, repl.REPLServer instances format output
using the util.inspect() method before writing the output
to the provided Writable stream (process.stdout by default).


Class: REPLServer. Extends: <readline.Interface>

Example:
const repl = require('repl');
const options = { useColors: true };

const firstInstance = repl.start(options);
const secondInstance = new repl.REPLServer(options);


Events:

replServer.on('exit', () => {
  console.log('Received "exit" event from repl!');
  process.exit();
});

'exit' - to emit use Ctrl+C twice, or Ctrl+D
'reset' - to emit use .clear


Some of methods:

.defineCommand(keyword<string>, cmd<Object> | <Function>)
- keyword - command (without a leading "." character).
- cmd - function to invoke when the command is processed.

Example of "repltest.js" file:

const repl = require('repl');

const replServer = repl.start({ prompt: '> ' });
replServer.defineCommand('sayhello', {
  help: 'Say hello',
  action(name) {
    this.clearBufferedCommand();
    console.log(`Hello, ${name}!`);
    this.displayPrompt();
  }
});
replServer.defineCommand('saybye', function saybye() {
  console.log('Goodbye!');
  this.close();
});

Example of later usage from within the REPL:
Terminal: node repltest.js -> editor will be opened
> .sayhello Node.js User
Hello, Node.js User!
> .saybye
Goodbye! -> editor will be closed after message


.displayPrompt([preserveCursor<boolean>])
Readies the REPL instance for input from the user,
printing the configured prompt to a new line in the output
and resuming the input to accept new input.

.clearBufferedCommand() - clears any command that
has been buffered but not yet executed.
This method is primarily intended to be called
from within the action function for commands
registered using the ".defineCommand()" method.

.builtinModules -> <string[]> include 'http' etc names

.start([options]) -> <repl.REPLServer>. Creates and starts.
- options <Object> | <string>
https://nodejs.org/api/repl.html#replstartoptions


The following example, for instance, provides
separate REPLs on stdin, a Unix socket, and a TCP socket:

Example:
const net = require('net');
const repl = require('repl');
let connections = 0;

repl.start({
  prompt: 'Node.js via stdin> ',
  input: process.stdin,
  output: process.stdout
});

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via Unix socket> ',
    input: socket,
    output: socket
  }).on('exit', () => {
    socket.end();
  });
}).listen('/tmp/node-repl-sock');

net.createServer((socket) => {
  connections += 1;
  repl.start({
    prompt: 'Node.js via TCP socket> ',
    input: socket,
    output: socket
  }).on('exit', () => {
    socket.end();
  });
}).listen(5001);

Running this application from the command line will start
a REPL on stdin. Other REPL clients may connect through
the Unix socket or TCP socket. "telnet", for instance,
is useful for connecting to TCP sockets, while "socat"
can be used to connect to both Unix and TCP sockets.

By starting a REPL from a Unix socket-based server
instead of stdin, it is possible to connect to
a long-running Node.js process without restarting it.



The "http" - HTTP server and client one must require('http').

HTTP message headers are represented by an object like this:

{ 'content-length': '123',
  'content-type': 'text/plain',
  'connection': 'keep-alive',
  'host': 'example.com',
  'accept': '*/*' }


Class: http.Agent - responsible for managing connection
persistence and reuse for HTTP clients.

It is good practice, to destroy() an Agent instance
when it is no longer in use, because unused sockets
consume OS resources.

Sockets are removed from an agent when the socket emits
either a 'close' event or an 'agentRemove' event.

Allowed use agent for an individual request by "{agent: false}".

Example:
const http = require('http');
http.get({
  hostname: 'localhost',
  port: 80,
  path: '/',
  agent: false  // Create a new agent just for this one request
}, (res) => {
  // Do stuff with response
});

CONSTRUCTOR
new Agent([options]) https://nodejs.org/api/http.html#new-agentoptions
- options<Object>
- - .keepAlive <boolean> - keep sockets around even when there
are no outstanding requests, so they can be used for future
requests without having to reestablish a TCP connection.
Default: false.
- - .keepAliveMsecs <number> when using the keepAlive option,
specifies the initial delay for TCP Keep-Alive packets. Ignored
when the keepAlive option is false or undefined. Default: 1000.
- - .maxSockets <number> Maximum number of sockets to allow per host. Default: Infinity.
- - .maxTotalSockets <number> Maximum number of sockets allowed for all hosts in total. Default: 256.
- - .scheduling <string> Scheduling strategy to apply when picking the next free socket to use. It can be 'fifo' or 'lifo'. The main difference between the two scheduling strategies is that 'lifo' selects the most recently used socket, while 'fifo' selects the least recently used socket. In case of a low rate of request per second, the 'lifo' scheduling will lower the risk of picking a socket that might have been closed by the server due to inactivity. In case of a high rate of request per second, the 'fifo' scheduling will maximize the number of open sockets, while the 'lifo' scheduling will keep it as low as possible. Default: 'lifo'.
- - .timeout <number> Socket timeout in milliseconds. This will set the timeout when the socket is created.

The "options" in socket.connect() are also supported.

The default http.globalAgent that is used by http.request() has all of these values set to their respective defaults.

Some of methods:

.createConnection(options[, callback]) -> <net.Socket>
subclass of <stream.Duplex>
- options <Object> connection details with net.createConnection()
format
- callback <Function> (err, socket)=>{ }
Produces a socket/stream to be used for HTTP requests.
Can be supplied in one of two ways:
by returning the socket/stream from this function, or
by passing the socket/stream to callback.

.keepSocketAlive(socket<stream.Duplex>)
Called when socket is detached from a request.
If this method returns a falsy value,
the socket will be destroyed instead of
persisting it for use with the next request.

.reuseSocket(socket, request)
- socket <stream.Duplex>
- request <http.ClientRequest>
Called when socket is attached to request after being persisted because of the keep-alive options.

.destroy() - destroy any sockets that are currently
in use by the agent.

.freeSockets -> <Object> contains arrays of sockets
currently awaiting use by the agent when keepAlive is enabled.
Do not modify.

.getName(options) -> <string>
- options <Object> options for name generation
- - .host <string> A domain name or IP address of the server to issue the request to
- - .port <number> Port of remote server
- - .localAddress <string> Local interface to bind for network
connections when issuing the request
- - .family <integer> Must be 4 or 6 if this doesn't equal
undefined.

Get a unique name for a set of request options, to determine
whether a connection can be reused.
For an HTTP agent, this returns host:port:localAddress
or host:port:localAddress:family.
For an HTTPS agent, the name includes the CA, cert, ciphers,
and other HTTPS/TLS-specific options
that determine socket reusability.


.maxFreeSockets<number> - default: 256
.maxSockets<number> - default: infinity

.requests<Object> - queues of requests that have not
yet been assigned to sockets. Do not modify.

.sockets<Object> - arrays of sockets currently in use
by the agent



Class: http.ClientRequest. Extends: <Stream>
This object is created internally and returned from http.request().
It represents an in-progress request whose header has already
been queued.
The header is still mutable using the setHeader(name, value),
getHeader(name), removeHeader(name) API.

Events: 'connect' 'continue' 'information'
'response' 'socket' 'timeout' 'upgrade'

.end([data[, encoding]][, callback]) - finishes sending the request.

.destroy([error]) -> <this>
- error <Error> Optional, an error to emit with 'error' event.
Destroy the request. Optionally emit an 'error' event,
and emit a 'close' event.
Calling this will cause remaining data in the response
to be dropped and the socket to be destroyed.

.destroyed -> <boolean> -> true after ".destroy()"

.flushHeaders() - Node.js normally buffers the request headers
until request.end()

.getHeader(name<string>) -> <any>

Example:
request.setHeader('content-type', 'text/html');
request.setHeader('Content-Length', Buffer.byteLength(body));
request.setHeader('Cookie', ['type=ninja', 'language=javascript']);
const contentType = request.getHeader('Content-Type');
// 'contentType' is 'text/html'
const contentLength = request.getHeader('Content-Length');
// 'contentLength' is of type number
const cookie = request.getHeader('Cookie');
// 'cookie' is of type string[]


.getRawHeaderNames() -> <string[]> -  unique names of
the current outgoing raw headers.

.maxHeadersCount<number> Default: 2000
Limits maximum response headers count.
If set to 0, no limit will be applied.

.path<string> - the request path.
.method<string> - the request method.
.host<string> - the request host.
.protocol<string> - the request protocol.
.removeHeader(name<string>)
.setHeader(name<string>, value<any>)
.setNoDelay([noDelay<boolean>])

.reusedSocket<boolean> true if
request is send through a reused socket.

.setSocketKeepAlive([enable][, initialDelay])
- enable<boolean>
- initialDelay<number>

.setTimeout(timeout[, callback]) -> <http.ClientRequest>
- timeout<number> ms
- callback <Function> Optional function to be called when a timeout occurs. Same as binding to the 'timeout' event.

.socket -> <stream.Duplex> - underlying socket
.writableEnded -> <boolean> - request.end() called.
.writableFinished -> <boolean> - true if data has been flushed
to the underlying system, immediately before the emit 'finish'.

.write(chunk[, encoding][, callback]) -> <boolean>
- chunk <string> | <Buffer>
- encoding <string>
- callback <Function>
Sends a chunk of the body. This method can be called multiple times.
If no Content-Length is set, data will automatically be encoded
in HTTP Chunked transfer encoding, so that server knows
when the data ends. The "Transfer-Encoding: chunked" header
is added. Calling "request.end()" is necessary
to finish sending the request.


Class: http.Server. Extends: <net.Server>
https://nodejs.org/api/http.html#class-httpserver

Events:
.on('close', ()=>{ });
Emitted when the server closes.

.on('checkContinue', (
request <http.IncomingMessage>,
response <http.ServerResponse>
)=>{ });
Emitted each time a request with
an HTTP "Expect: 100-continue" is received.

.on('checkExpectation', (
request <http.IncomingMessage>,
response <http.ServerResponse>
)=>{ });
Emitted each time a request with
an HTTP "Expect" header is received,
where the value is not "100-continue".

.on('clientError', (
exception <Error>,
socket <stream.Duplex>
)=>{ });
if a client connection emits an 'error' event.
This event is guaranteed to be passed
an instance of the <net.Socket> class.

.on('connect', (
request <http.IncomingMessage>,
  //Arguments for the HTTP request,
  //as it is in the 'request' event
socket <stream.Duplex>,
  //Network socket between the server and client
head <Buffer>
  //The first packet of the tunneling stream (may be empty)
)=>{ });

Emitted each time a client requests
an HTTP CONNECT method.
If this event is not listened for, then clients requesting
a CONNECT method will have their connections closed.

This event is guaranteed to be passed
an instance of the <net.Socket> class.

After this event is emitted, the request's socket
will not have a 'data' event listener, meaning
it will need to be bound in order to handle data
sent to the server on that socket.


.on('connection', (socket <stream.Duplex>)=>{ });
This event is emitted when a new TCP stream is established.

If socket.setTimeout() is called here, the timeout
will be replaced with server.keepAliveTimeout when
the socket has served a request
(if server.keepAliveTimeout is non-zero).

This event is guaranteed to be passed
an instance of the <net.Socket> class.


.on('request', (
request <http.IncomingMessage>,
response <http.ServerResponse>
)=>{ });
Emitted each time there is a request.
There may be multiple requests per connection
(in the case of HTTP Keep-Alive connections).


.on('upgrade', (
request <http.IncomingMessage>,
  //Arguments for the HTTP request,
  //as it is in the 'request' event
socket <stream.Duplex>,
  //Network socket between the server and client
head <Buffer>
  //The first packet of the upgraded stream (may be empty)
Emitted each time a client requests an HTTP upgrade.

Listening to this event is optional and clients cannot
insist on a protocol change.

After this event is emitted, the request's socket will
not have a 'data' event listener, meaning it will need
to be bound in order to handle data sent
to the server on that socket.

This event is guaranteed to be passed
an instance of the <net.Socket> class.


Some of methods.
https://nodejs.org/api/http.html#serverclosecallback

.close([callback<Function>]) - stops server from new connections

.headersTimeout<number> Default: 60000
Limit the amount of time the parser will wait
to receive the complete HTTP headers.

.listen() - starts server listening for connections.
.listening<boolean> - true after ".listen()" has been used


.maxHeadersCount<number> Default: 2000 - limits incoming
headers. When 0 no limit will be applied.

.requestTimeout<number> Default: 0 ms.
For receiving the entire request from the client.
If the timeout expires, the server responds with status 408
without forwarding the request to the request listener
and then closes the connection.
Must be set to a non-zero value (e.g. 120 seconds)
to prevent Denial-of-Service attacks in case
the server is deployed without a reverse proxy in front.

.setTimeout([msecs][, callback]) -> <http.Server>
- msecs <number> Default: 0 (no timeout)
- callback <Function>
Sets the timeout value for sockets, and emits a 'timeout'
event on the Server object, passing the socket
as an argument, if a timeout occurs.

.maxRequestsPerSocket<number> Default: 0 (no limit)
When the limit is reached
will get 503 Service Unavailable as a response.

.timeout<number> ms. Default: 0 (no timeout)
Inactivity before a socket is presumed to have timed out.
The socket timeout logic is set up on connection, so
changing this value only affects new connections
to the server, not any existing connections.

.keepAliveTimeout<number> ms. Default: 5000 (5 seconds).
Inactivity a server needs to wait for additional incoming data,
after it has finished writing the last response,
before a socket will be destroyed.


Class: http.ServerResponse. Extends: <Stream>
This object is created internally by HTTP server
https://nodejs.org/api/http.html#class-httpserverresponse

Events:

'close' - response is completed, or its
underlying connection was terminated prematurely.

'finish' - emitted when the response has been sent.


Some of methods and properties:

.addTrailers(headers)
- headers <Object>
This method adds HTTP trailing headers (a header but
at the end of the message) to the response.

.end([data[, encoding]][, callback]) -> <this>
- data <string> | <Buffer>
- encoding <string>
- callback <Function>
This method signals to the server that
all of the response headers and body have been sent.

.flushHeaders() - from precached condition to response

.getHeader(name<string>) -> <any>
Reads out a header that's
already been queued but not sent to the client.

.getHeaderNames() -> <string[]>


.getHeaders() -> <Object>

Example:
response.setHeader('Foo', 'bar');
response.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);
const headers = response.getHeaders();
// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }

.hasHeader(name<string>) -> <boolean>

.headersSent<boolean> readonly - headers were sent.

.removeHeader(name<string>)

.req<http.IncomingMessage>


.sendDate<boolean> when true(default), the Date header will be
automatically generated and sent in the response if
it is not already present in the headers.
This should only be disabled for testing;
HTTP requires the Date header in responses.

.setHeader(name<string>, value<any>) -> <http.ServerResponse>

Example:
const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('X-Foo', 'bar');
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('ok');
}); // Returns content-type = text/plain


.setTimeout(ms<number>[, callback]) -> <http.ServerResponse>
If a callback is provided, then it is added as a listener
on the 'timeout' event on the response object.
If no 'timeout' listener is added to the request, the response,
or the server, then sockets are destroyed when they time out.

.socket<stream.Duplex>
This property is guaranteed to be an instance of the
<net.Socket> class, a subclass of <stream.Duplex>

.statusCode<number> Default: 200

.statusMessage<string>
Example: response.statusMessage = 'Not found';

.writableEnded<boolean> true after response.end()

.writableFinished<boolean>true before the 'finish' emitted

.write(chunk[, encoding][, callback]) -> <boolean>
- chunk <string> | <Buffer>
- encoding <string> Default: 'utf8'
- callback <Function>
-> true when the entire data was flushed successfully


.writeHead(statusCode[, statusMessage][, headers])
- statusCode <number>
- statusMessage <string> - human readable
- headers <Object> | <Array>
-> <http.ServerResponse>
This method must only be called once on a message
and it must be called before response.end() is called.

Example:
const body = 'hello world';
response.writeHead(200, {
    'Content-Length': Buffer.byteLength(body),
    'Content-Type': 'text/plain'
  }).end(body);

.writeContinue() - sends a HTTP/1.1 100 Continue message
to the client, indicating that
the request body should be sent.

.writeProcessing() - sends a HTTP/1.1 102 Processing
message to the client, indicating that
the request body should be sent.


Class: http.IncomingMessage Extends: <stream.Readable>
An IncomingMessage object is created by "http.Server" or
"http.ClientRequest" and passed as the first argument
to the 'request' and 'response' event respectively.

Event: 'close' - underlying connection was closed.

Some of methods and properties:
.complete<boolean> - true if a complete HTTP message
has been received and successfully parsed.

.destroy([error<Error>]) -> <this>
Calls destroy() on the socket that received the
IncomingMessage. If error is provided, an 'error' event
is emitted on the socket and error is passed
as an argument to any listeners on the event.

.headers<Object> - key/value. keys is lower-cased

.httpVersion<string> - '1.1' or '1.0'

.method<string> request method obtained from "http.Server".

.rawHeaders<string[]>
.rawTrailers<string[]>

.setTimeout(ms<number>[, callback]) -> <http.IncomingMessage>
Calls message.socket.setTimeout(msecs, callback).

.socket<stream.Duplex>

.statusCode<number> valid if response obtained
from http.ClientRequest.

.statusMessage<string> valid if response obtained
from http.ClientRequest.

.trailers<Object>

.url<string> valid if request obtained from "http.Server".



Class: http.OutgoingMessage. Extends: <Stream>.

https://nodejs.org/api/http.html#class-httpoutgoingmessage
This class serves as the parent class of "http.ClientRequest"
and "http.ServerResponse". It is an abstract of outgoing
message from the perspective of the participants of HTTP
transaction.

Some of methods and properties.
.flushHeaders()
.getHeader(name<string>)
.getHeaderNames()
.getHeaders() -> <Object>
.hasHeader(name<string>)
.headersSent<boolean>
.removeHeader()
.setHeader(name<string>, value<string>)
.setTimeout(ms[, callback]) -> <this>
.socket
.writableEnded true after outgoingMessage.end()
.writableFinished - data has been flushed
.writableLength<number> bytes in buffer
.write(chunk[, encoding][, callback])


The 'http' underlying functionality.

http.METHODS<string[]> - supported by the parser
http.STATUS_CODES<Object> - of response
Example: http.STATUS_CODES[404] === 'Not Found'

http.createServer([options][, requestListener]) - <http.Server>
- options <Object>
- - .IncomingMessage <http.IncomingMessage>
- - .ServerResponse <http.ServerResponse>
- - .insecureHTTPParser <boolean> See --insecure-http-parser
for more information. Default: false
- - .maxHeaderSize <number> Default: 16384 (16 KB).
- requestListener <Function> function which is automatically
added to the 'request' event.

Example:
const http = require('http');

const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end( JSON.stringify({ data: 'Hello World!' }) );
});

server.on('clientError', (err, socket) => {
  if (err.code === 'ECONNRESET' || !socket.writable) {
    return;
  }//check the socket still writable(not destroyed after response)
  socket.end('HTTP/1.1 400 Bad Request\r\n\r\n');
});
server.listen(8000);


http.get(options[, callback])
http.get(url[, options][, callback]) -> <http.ClientRequest>
- url <string> | <URL>
- options <Object> Accepts the same options
as http.request(), with the method always set to GET.
Properties that are inherited from the prototype are ignored.
- callback <Function>

http.globalAgent<http.Agent>
Global instance of Agent which is used as the default
for all HTTP client requests.

http.maxHeaderSize<number> bytes read-only Defaults: 16 KB.
Checked, on kubuntu returns 8192 which is not 16 but 8 KB.
Configurable using the --max-http-header-size CLI option.



http.request(options[, callback]) -> <Object> - writable stream
http.request(url<string>|<URL>[, options<Object>][, callback])
-> <http.ClientRequest>. Fully configurable using "options".
F.e.: options.auth<string> Basic authentication ('user:password')
to compute an Authorization header. See docs link:
https://nodejs.org/api/http.html#httprequesturl-options-callback


If one needs to upload a file with a POST request,
then write to the ClientRequest object.

Example:
const http = require('http');

const postData = JSON.stringify({
  'msg': 'Hello World!'
});

const options = {
  hostname: 'www.google.com',
  port: 80,
  path: '/upload',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk)=>{ console.log(`BODY: ${chunk}`); });
  res.on('end', ()=>{ console.log('No more response data.'); });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`); } );

// Write data to request body
req.write(postData);
req.end();

In the example req.end() was called. With http.request() one
must always call req.end() to signify the end of the request
- even if there is no data being written to the request body.


There are a few special headers that should be noted:

- Sending a 'Connection: keep-alive' will notify Node.js
that the connection to the server should be persisted
until the next request.

- Sending a 'Content-Length' header will disable
the default chunked encoding.

- Sending an 'Expect' header will immediately send
the request headers.

- Sending an Authorization header will override
using the "auth" option to compute basic authentication.

Events emitted with some case.
- successful request: socket, response, data, end, close.
- connection error: socket, error, close.
- premature connection close before the response is received:
socket, error, Error: socket hand up, ECONNRESET, close.
- premature connection close after the response is received:
socket, response, data, aborted, error, Error: aborted, close,
close(on the "res" object).

etc.
https://nodejs.org/api/http.html#httprequesturl-options-callback



.validateHeaderName(name<string>) Performs the low-level
validations on the provided name that are done when
res.setHeader(name, value) is called.

.validateHeaderValue(name<string>, value<any>) Performs the
low-level validations on the provided value that are done
when res.setHeader(name, value) is called.

Example:
const { validateHeaderValue } = require('http');

try {
  validateHeaderValue('x-my-header', undefined);
} catch (err) {
  err instanceof TypeError; // --> true
  err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'; // -->
  // true
  err.message; // --> 'Invalid value "undefined" for header
  // "x-my-header"'
}

try {
  validateHeaderValue('x-my-header', 'oʊmɪɡə');
} catch (err) {
  err instanceof TypeError; // --> true
  err.code === 'ERR_INVALID_CHAR'; // --> true
  err.message; // --> 'Invalid character in header content
  // ["x-my-header"]'
}


The 'https' - similar implementation but for HTTPS.
HTTPS is the HTTP protocol over TLS/SSL.


The 'http2' module provides an implementation of
the HTTP/2 protocol. It can be accessed using:
const http2 = require('http2');
https://nodejs.org/api/http2.html#http2


Compatibility API
The Compatibility API has the goal of providing a similar
developer experience of HTTP/1 when using HTTP/2,
making it possible to develop applications that support both
HTTP/1 and HTTP/2.
This API targets only the public API of the HTTP/1.

ALPN negotiation allows supporting both HTTPS and HTTP/2
over the same socket. The req and res objects can be
either HTTP/1 or HTTP/2, and an application must restrict
itself to the public API of HTTP/1, and detect if
it is possible to use the more advanced features of HTTP/2.
https://nodejs.org/api/http2.html#alpn-negotiation

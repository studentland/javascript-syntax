
The "process" - control the current Node.js process.

Process events is an instance of <EventEmitter>.

Event: 'beforeExit' - Node.js empties its event loop and
has no additional work to schedule.


Event: 'disconnect' - will be emitted when the IPC channel is closed.
In this case Node.js process should be spawned with an IPC channel,


Event: 'exit' - Node.js process is about to exit by:
- process.exit()
- Node.js event loop haven't anymore work to perform
Callback params:
- code <integer>
The Node.js process will exit immediately after calling the 'exit' event.
So listener functions must only perform SYNCHRONOUS operations.
Means timeout "process.on('exit', (code) => { setTimeout(()=>{...},0); }" never accur.


Event: 'message' - "childprocess.send()" is received by the child process.
Callback params:
- message <Object> | <boolean> | <number> | <string> | <null>
a parsed JSON object or a serializable primitive value.
- sendHandle <net.Server> | <net.Socket>
a net.Server or net.Socket object, or undefined.


Event: 'rejectionHandled' - Promise has been rejected and an error handler
was attached to it (using promise.catch(),
Callback params:
- promise <Promise> The late handled promise.


https://nodejs.org/api/process.html#warning-using-uncaughtexception-correctly
Event: 'uncaughtException' - is a crude mechanism
for exception handling intended to be used only as a last resort.
Callback params:
- err <Error> The uncaught exception.
- origin <string> Indicates if the exception originates
from an unhandled rejection or from a synchronous error.


Event: 'uncaughtExceptionMonitor' - emitted before an 'uncaughtException'
Callback params:
- err <Error> The uncaught exception.
- origin <string> Indicates if the exception originates from
an unhandled rejection or from synchronous errors.


Event: 'unhandledRejection' - emitted whenever a Promise is rejected and no error handler is attached to the promise
Callback params:
- reason <Error> | <any> The object with which the promise
was rejected (typically an Error object).
- promise <Promise> The rejected promise.

When programming with Promises, exceptions are encapsulated
as "rejected promises". Rejections can be caught and handled
using "promise.catch()" and are propagated through a Promise chain.
The 'unhandledRejection' event is useful for detecting and keeping
track of promises that were rejected whose rejections have not handled.


Event: 'warning' - emitted whenever Node.js emits a process warning.
Callback params:
- warning <Error> Key properties of the warning are:
- -  name <string> The name of the warning. Default: 'Warning'.
- -  message <string> A system-provided description of the warning.
- -  stack <string> A stack trace to the location in the code
where the warning was issued.
By default, Node.js will print process warnings to stderr.
The --no-warnings command-line option can be used
to suppress the default console output but the 'warning' event
will still be emitted by the process object.

Emitting custom warnings - process.emitWarning()


Event: 'worker' - emitted after a new <Worker> thread has been created.
Callback params:
- worker <Worker> The <Worker> that was created.


https://nodejs.org/api/process.html#signal-events
Signal events - emitted when the Node.js process receives a signal.
'SIGUSR1' is reserved by Node.js to start the debugger.
'SIGTERM' and 'SIGINT' on non-Windows platforms,
reset the terminal mode before exiting with code 128 + signal number.
'SIGPIPE' is ignored by default. It can have a listener installed.
'SIGHUP' is generated on Windows when the console window is closed.
'SIGTERM' is not supported on Windows, it can be listened on.
'SIGINT' can usually be generated with Ctrl+C.
'SIGBREAK' on Windows when Ctrl+Break is pressed.
'SIGWINCH' when the console has been resized.
'SIGKILL' cannot have a listener installed,
it will unconditionally TERMINATE Node.js on all platforms.
'SIGSTOP' cannot have a listener installed.
'SIGBUS', 'SIGFPE', 'SIGSEGV' and 'SIGILL', when not raised artificially
using kill(2), inherently leave the process in a state from which it is not safe to call JS listeners. Doing so might cause the process to stop responding.

0 signal can be sent to test for the existence of a process,
it has no effect if the process exists, but will throw an error
if the process does not exist.

Example: events and signals
process.on('uncaughtException', (err, origin) => {...} );
process.on('uncaughtExceptionMonitor', (err, origin) => {...} );

process.on('unhandledRejection', (reason, promise) => {...} );
somePromise.then((res) => {return JSON.paSRE(res)); } );
//or
function SomeResource() {
  // Initially set the loaded status to a rejected promise
  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));
}
const resource = new SomeResource(); //event 'unhandledRejection'

process.on('warning', (warning) => {
  console.warn(warning.name);    // Print the warning name
  console.warn(warning.message); // Print the warning message
  console.warn(warning.stack);   // Print the stack trace
});

function handle(signal) { console.log(`Received ${signal}`); }
process.on('SIGINT', handle);
process.on('SIGTERM', handle);



Methods:
.abort() - exit process immediately

.allowedNodeEnvironmentFlags -> readonly <Set>of flags allowable
within the NODE_OPTIONS environment variable.
import { allowedNodeEnvironmentFlags } from 'process';
allowedNodeEnvironmentFlags.forEach((flag) => {
  // -r --inspect-brk --abort_on_uncaught_exception ...
});

.arch <string> - target OS CPU architecture of compiled Node.js binary.
One of: 'arm', 'arm64', 'ia32', 'mips','mipsel', 'ppc', 'ppc64', 's390', 's390x', and 'x64'.


.argv-<string[]> - command-line arguments passed when the Node.js process was launched.
The first element will be process.execPath. See process.argv0 if access
to the original value of argv[0] is needed.
The second element will be the path to the JavaScript file being executed.
The remaining elements will be any additional command-line arguments.

"process.js"
const { argv } = require('process');
argv.forEach((val, index) => { console.log(`${index}: ${val}`); });

terminal: $ node process-args.js one two=three four
terminal output:
0: /usr/local/bin/node
1: /Users/mjr/work/node/process-args.js
2: one
3: two=three
4: four


.argv0 <string> read-only copy of argv[0] passed when Node.js starts.

.channel <Object> if spawned with IPC reference to the IPC channel, or undefined.

.channel.ref() makes IPC channel keep the event loop of
the process running if .unref() has been called before.

.channel.unref() - makes IPC channel not keep the event loop of the process,
and lets it finish even while the channel is open.

.chdir(directory:<string>) changes the current process working directory.
This feature is not available in <Worker> threads.


.config <Object> containing the JavaScript representation of
the configure options used to compile the current Node.js executable.

.disconnect() close the IPC channel of IPC channel spawned process

.connected - If IPC spawned return true, or false(also after ".disconnect()")
Once ".connected" = false then ".send()" is not available to messaging over IPC.

.cpuUsage() -> microsecond. 1e-6 of second
import { cpuUsage } from 'process';
const startUsage = cpuUsage();
// { user: 38579, system: 6986 }
// spin the CPU for 500 milliseconds
const now = Date.now();
while (Date.now() - now < 500);
console.log(cpuUsage(startUsage));
// { user: 514883, system: 11226 }


.cwd() <string> process current working directory

.debugPort <number> Node.js debugger port when enabled.

https://nodejs.org/api/process.html#processdlopenmodule-filename-flags
.dlopen(module, filename[, flags]) - dynamically loading shared objects.
An important requirement when calling process.dlopen() is that
the module instance must be passed. Functions exported by
the C++ Addon are then accessible via module.exports.


.emitWarning(warning[, options]) - emit custom or application specific process warnings.
const { emitWarning } = require('process');
emitWarning('Something happened!', {
  code: 'MY_WARNING', detail: 'This is some additional information'
});
// Emits:
// (node:56338) [MY_WARNING] Warning: Something happened!
// This is some additional information

https://nodejs.org/api/process.html#processemitwarningwarning-type-code-ctor
.emitWarning(warning[, type[, code]][, ctor])

As a best practice, warnings should be emitted only once per process.
To do so, it is recommended to place the emitWarning()
behind a simple boolean flag.
Example:
import { emitWarning } from 'process';
function emitMyWarning() {
  if (!emitMyWarning.warned) {
    emitMyWarning.warned = true;
    emitWarning('Only warn once!');
  }
}
emitMyWarning(); // Emits: (node: 56339) Warning: Only warn once!
emitMyWarning(); // Emits nothing


.env <Object> containing the user environment.
Example:
{
  TERM: 'xterm-256color',
  SHELL: '/usr/local/bin/bash',
  USER: 'maciej',
  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',
  PWD: '/Users/maciej',
  EDITOR: 'vim',
  SHLVL: '1',
  HOME: '/Users/maciej',
  LOGNAME: 'maciej',
  _: '/usr/local/bin/node'
}
Example of modify:
import { env } from 'process';
env.foo = 'bar'; console.log(env.foo);

Modify not work outside Node.js process. Next NOT work.
$ node -e 'process.env.foo = "bar"' && echo $foo

Node.js may throw an error when the value is not a string, number, or boolean.
On Windows operating systems, environment variables are case-insensitive.
Use "delete " to remove value from ".env"
import { env } from 'process';
env.TEST = 1; delete env.TEST;
console.log(env.TEST); //undefined


.execArgv <string[]> launch moment Node.js process command-line options

.execPath <string> - process started executable absolute pathname
Example: '/usr/local/bin/node'


.exit([code]) - terminate the process synchronously, with exit code.
params:
- code <integer> The exit code. Default: 0.
Example:
const { exit } = require('process');
exit(1); // 1 should be seen in shell, which execute node

DONT DO THIS DATA WILL BE LOST
const { exit } = require('process');
if (someConditionNotMet()) {
  printUsageToStdout(); //will not completed
  exit(1); //terminate as possible fast
}
The reason this is problematic is because
writes to process.stdout in Node.js are sometimes asynchronous,
few ticks needed, and exit is synchronously terminate process.

GOOD WAY
const process = require('process');
if (someConditionNotMet()) {
  printUsageToStdout();
  process.exitCode = 1;
}

.exitCode <integer> - more safe exit(process terminate), example above.

OS specific, win and android UNAVAILABLE.
.getegid() -> effective group identity,
.geteuid() -> numerical effective user identity
.getgid() -> numerical group identity
.getgroups() .getuid() .initgroups(user, extraGroup)
and setters
.setegid(id), .seteuid(id), .setgid(id), .setgroups(groups)
.setuid(id)


.hasUncaughtExceptionCaptureCallback() <boolean> - as is
.setUncaughtExceptionCaptureCallback(fn<Function> | <null>)

.hrtime.bigint() <bigint> current high-resolution real time in nanoseconds.

.kill(pid[, signal])
- pid <number> A process ID
- signal <string> | <number> Default: 'SIGTERM'.



.memoryUsage() - measured in bytes
-> <Object>
-  .rss <integer>
-  .heapTotal <integer>
-  .heapUsed <integer>
-  .external <integer>
-  .arrayBuffers <integer>
".memoryUsage.rss()" also available


IMPORTANT FOR API CREATION
It is very important for APIs to be
either 100% synchronous or 100% asynchronous.
Official Docs should be discovered.
https://nodejs.org/api/process.html#processnexttickcallback-args
.nextTick(callback[, ...args])
- callback <Function>
- ...args <any> Additional arguments to pass when invoking the callback

Example:
const { nextTick } = require('process');
console.log('start');
nextTick(() => { console.log('nextTick callback'); } );
console.log('scheduled');
// Output:
// start
// scheduled
// nextTick callback

This is important when developing APIs in order to give users
the opportunity to assign event handlers after an object has been
constructed but before any I/O has occurred:

Example:
const { nextTick } = require('process');
function MyThing(options) {
  this.setupOptions(options);

  nextTick(() => {
    this.startDoingStuff();
  });
}

const thing = new MyThing();
thing.getReadyForStuff();
// thing.startDoingStuff() gets called now, not before.



// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!
function maybeSync(arg, cb) {
  if (arg) {
    cb();
    return;
  }
  fs.stat('file', cb);
}

This API is hazardous because in the following case:

const maybeTrue = Math.random() > 0.5;

maybeSync(maybeTrue, () => {
  foo();
});
bar();

It is not clear whether foo() or bar() will be called first.

GOOD approach:

const { nextTick } = require('process');

function definitelyAsync(arg, cb) {
  if (arg) {
    nextTick(cb);
    return;
  }
  fs.stat('file', cb);
}


https://nodejs.org/api/process.html#when-to-use-queuemicrotask-vs-processnexttick
When to use queueMicrotask() vs. process.nextTick()
The queueMicrotask() API is an alternative to process.nextTick()
Within Node.js, every time the "next tick queue" is drained,
the MICROTASK queue is drained immediately AFTER.

Example:
const { nextTick } = require('process');

Promise.resolve().then(() => console.log(2));
queueMicrotask(() => console.log(3));
nextTick(() => console.log(1));
// Output:
// 1
// 2
// 3

In simple scenarios, queueMicrotask() can be
a drop-in replacement for process.nextTick().

Example:
console.log('start');
queueMicrotask(() => {console.log('microtask callback');} );
console.log('scheduled');
// Output:
// start
// scheduled
// microtask callback



.title - title which is current value of "ps" terminal command
assigning value is allowed

.umask(mask) - set new octal number
- mask <string> | <integer>
Child processes inherit the mask from
the parent process. Returns the previous mask.
In Worker threads,
process.umask(mask) will throw an exception.

.version -> <string> Node.js version
To get the version string without the
prepended v, use process.versions.node

.versions -> <Object> node.js and dependencies versions.
Node.js will refuse to load modules compiled with
other ABI(ABI changes when C++ API changes).

.noDeprecation - true if "--no-deprecation" flag is set to process
.throwDeprecation - true if "--throw-deprecation" flag is set to process
.traceDeprecation - ...
.pid <integer>
.platform <string> - OS name
.ppid <integer> - process parent id
.release - of the Node.js code
.report <Object> - diagnostic reports
.report.compact <boolean> - is report single-line JSON
and several specific .report.propName methods
include get and write report
.resourceUsage() -> <Object>:
- .userCPU, .systemCPU ... and other
.uptime() -> <number> seconds, process has been running




.send(message[, sendHandle[, options]][, callback]) -> <boolean>
If IPC spawned, allow send message to parent.
The message goes through serialization and parsing.


Stream file descriptors, fixed at 0 1 2 accordingly.
.stdin.fd .stdout.fd .stderr.fd -> <number>
In <Worker> threads, these fields does not exist.

Streams. -> <Stream>
.stdin .stdout .stderr
OS specific differences from other Node.js streams:
https://nodejs.org/api/process.html#a-note-on-process-io


https://nodejs.org/api/process.html#exit-codes
Exit codes. 1..13 128+(for signals)

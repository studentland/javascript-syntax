
Jest - also used as testing library for react.
https://jestjs.io/docs/tutorial-react

React is a JavaScript library for building user interfaces.
React is used to build single-page applications.
React allows us to create reusable UI components.
React,is a JavaScript library created by Facebook.

React is a tool for building UI components.

To use React in production, you need npm and Node.js installed.

Only for testing purposes, not for production, u can use next syntax.
<head>
  <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>


What is JSX?
JSX stands for JavaScript XML.
JSX makes it easier to write and add HTML in React.
You are not required to use JSX.

With JSX you can write expressions inside curly braces { }.
Example:
const myelement = <h1>React is {5 + 5} times better with JSX</h1>;

For multiple lines, put the HTML inside parentheses "( )".
const myelement = (
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
  </ul>
);

The HTML code must be wrapped in ONE top level element.
Above the "<ul>" is a top level element.

JSX will throw an error if the HTML is not correct,
or if the HTML misses a parent element.

Alternatively, you can use a "fragment" to wrap multiple lines,
to prevent adding extra nodes. Use <></> syntax.
Example:
const myelement = (
  <>
    <p>I am a paragraph.</p>
    <p>I am a paragraph too.</p>
  </>
);

JSX follows XML rules, so all HTML tags must be closed.
Example:
const myelement = <input type="text" />;
Error, if the HTML not closed properly.

Use attribute "className" for HTML "class" in JSX:
const myh1 = <h1 className="myclass">Hello World</h1>;

React supports "if" statements, but OUTSIDE JSX.
Example:
const x = 5;
let text = "Goodbye";
if (x < 10) {
  text = "Hello";
}
const myh1 = <h1>{text}</h1>;

Or use ternary expressions instead:
const x = 5;
const myh1 = <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>;

Note that in order to embed a JavaScript expression inside JSX,
the JavaScript MUST BE WRAPPED with curly braces, "{ }".


REACT COMPONENTS

Like functions that return HTML.
Components are independent and reusable bits of code.
They serve the same purpose as JavaScript functions,
but work in isolation and return HTML.

Components come in two types,
Class components and Function components.

A React component name MUST start with an UPPER CASE letter.

CLASS COMPONENT
A class component must include the "extends React.Component" statement,
and also require "render()" method to return HTML.
Example:
class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}

FUNCTION COMPONENT syntax is compact.
Example:
function Car() {
  return <h2>Hi, I am a Car!</h2>;
}

RENDERING A COMPONENT
Display the Car component in the "root" element:
Example:
ReactDOM.render(<Car />, document.getElementById('root'));


Props
Components can be passed as "props", which stands for properties.

Props are like function arguments,
and you send them into the component as attributes.
Example:
function Car(props) {
  return <h2>I am a {props.color} Car!</h2>;
}
ReactDOM.render(<Car color="red"/>, document.getElementById('root'));


Refer to components inside other components.
Example:
function Car() {
  return <h2>I am a Car!</h2>;
}

function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car />
    </>
  );
}

ReactDOM.render(<Garage />, document.getElementById('root'));


React is all about RE-USING code, and it is recommended to
SPLIT your components into SEPARATE FILES.

To do that, create a new file
with a .js file extension and put the code inside it:
Note that the filename MUST START with an UPPERCASE character.
F.e.: "Car.js"
Example of "Car.js" file:
function Car() {
  return <h2>Hi, I am a Car!</h2>;
}
export default Car;

And then import the file in your application.
Example:
import React from 'react';
import ReactDOM from 'react-dom';
import Car from './Car.js';

ReactDOM.render(<Car />, document.getElementById('root'));


REACT CLASS COMPONENTS details.

If your component has a constructor function, the props
should always be passed to the constructor and also
to the React.Component via the super() method.
Example:
class Car extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h2>I am a {this.props.model}!</h2>;
  }
}
ReactDOM.render(<Car model="Mustang"/>, document.getElementById('root'));

React Class components have a built-in state object,
where you store property values that belongs to the component.
When the state object changes, the component re-renders.

Specify the state object in the constructor method.
Example:
class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang"
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  
  render() { return (<div>
    <h1>My Car {this.state.brand}</h1>
  </div>); }
}

Always use the setState() method to change the state object,
it will ensure that the component knows its been updated
and calls the render() method (and all the other lifecycle methods).


Lifecycle of Components, x3.
Mounting, Updating, and Unmounting.

MOUNTING - putting elements into the DOM.
Include calling of steps/methods, x4:
- constructor()
- getDerivedStateFromProps(),
- render()
- componentDidMount()

The render() method is required, the others is optional,
and will be called if you define them.


UPDATING - when "state" or "props" was changed.
Include calling of x5 methods, "render" is always called,
but only when shouldComponentUpdate() returns true(default).
- getDerivedStateFromProps()
- shouldComponentUpdate()
- render()
- getSnapshotBeforeUpdate()
- componentDidUpdate()

If the "getSnapshotBeforeUpdate()" method is present,
you should also include the "componentDidUpdate()" method,
otherwise you will get an error.


UNMOUNTING - removed from the DOM.
Only componentWillUnmount() gets called.



REACT PROPS - arguments passed into React components.

Props are passed to components via HTML attributes.
Example:
- pass the argument
const carYear = 1970;
const carSizes = {long:"4m", short:"3.5m"};
const myelement = (<Car
brand="Ford" year={carYear} sizes={carSizes} />);
- use the argument in the component
function Car(props) {
  return (<h2>I am a
    { props.brand } { props.year } { props.sizes.long }
  !</h2>);
}

React PROPS are READ-ONLY! or ERROR


REACT EVENTS - perform actions based on user events.

React has the same events as HTML:
click, change, mouseover etc.
React events are written in camelCase syntax.
React event handlers are written inside curly braces.

HTML event example:
<button onclick="shoot()">Take the Shot!</button>
REACT event example:
<button onClick={shoot}>Take the Shot!</button>

Full event example:
import React from 'react';
import ReactDOM from 'react-dom';
function Football() {
  const shoot = () => {
    alert("Great Shot!");
  }
  const goal = (a) => { alert(a); }
  const eGoal = (a, b) => { alert(a + " event is " + b.type); }
  return (
    <>
      <button onClick={shoot}>Take the shot!</button>
      <button onClick={() => goal("Goal!")}>goal!</button>
      <button onClick={(event) => eGoal("Goal!", event)}>event!</button>
    </>
  );
}
ReactDOM.render(<Football />, document.getElementById('root'));


REACT CONDITIONAL RENDERING

Example of "if" statement short form:
import React from 'react';
import ReactDOM from 'react-dom';
function Missed() { return <h1>MISSED!</h1>; }
function Goal() { return <h1>GOAL!</h1>; }
function Hit(props) {
  return (props.isGoal) ? (<Goal />) : (<Missed />)
}
ReactDOM.render(<Hit isGoal={false} />,
  document.getElementById('root'));
  
Use "&&" to render the "tail" after && if before && is true.
Example:
...
return (
    <>
      <h1>Garage</h1>
      {cars.length > 0 &&
        <h2>
          You have {cars.length} cars in your garage.
        </h2>
      }
    </>
  );
//if cars.length > 0 "h2" will be added.


REACT LISTS - to render lists with some type of loop.

JavaScript map() array method is prefered.
Example bottom will receive a warning that there is no unique "key" provided for the list items:
function Car(props) {
  return <li>I am a { props.brand }</li>;
}

function Garage() {
  const cars = ['Ford', 'BMW', 'Audi'];
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <ul>
        {cars.map((car) => <Car brand={car} />)}
      </ul>
    </>
  );
}


KEYS allow React to keep track of elements.
This way, if an item is updated or removed,
only that item will be re-rendered
instead of the entire list.

Keys need to be unique to each sibling.
But they can be duplicated globally. Like array indices.

Good example, no warning:
function Car(props) {
  return <li>I am a { props.brand }</li>;
}

function Garage() {
  const cars = [
    {id: 1, brand: 'Ford'},
    {id: 2, brand: 'BMW'}
  ];
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <ul>
        {cars.map((car) => <Car key={car.id} brand={car.brand} />)}
      </ul>
    </>
  );
}
ReactDOM.render(<Garage />, document.getElementById('root'));


Adding FORMS in React
Example:
function MyForm() {
  return (
    <form>
      <label>Enter your name:
        <input type="text" />
      </label>
    </form>
  )
}
ReactDOM.render(<MyForm />, document.getElementById('root'));


HANDLING FORMS
You can control changes by adding event handlers
in the "onChange" attribute.

You can control the submit action by adding an event handler
in the "onSubmit" attribute for the <form>:

To access the fields in the event handler use the "event.target.name" and "event.target.value" syntax.

To update the state, use square brackets [bracket notation] around the property name.

We can use the "useState" Hook to keep track of
each inputs value and provide a "single source of truth"
for the entire application.

Example:
import { useState } from "react";
import ReactDOM from "react-dom";

function MyForm() {
  const [inputs, setInputs] = useState({});

  const handleChange = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setInputs(values => ({...values, [name]: value}))
  }

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(inputs);
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>Enter your name:
      <input 
        type="text" 
        name="username" 
        value={inputs.username || ""} 
        onChange={handleChange}
      />
      </label>
      <label>Enter your age:
        <input 
          type="number" 
          name="age" 
          value={inputs.age || ""} 
          onChange={handleChange}
        />
        </label>
        <input type="submit" />
    </form>
  )
}

ReactDOM.render(<MyForm />, document.getElementById('root'));

We USE the SAME event handler function for both input fields,
we could write one event handler for each,
but this gives us much cleaner code
and is the preferred way in React.


In React the VALUE of a TEXTAREA is placed
in a "value" attribute.
Example:
import { useState } from "react";
import ReactDOM from "react-dom";

function MyForm() {
  const [textarea, setTextarea] = useState(
    "The content of a textarea goes in the value attribute"
  );

  const handleChange = (event) => {
    setTextarea(event.target.value)
  }

  return (
    <form>
      <textarea value={textarea} onChange={handleChange} />
    </form>
  )
}

ReactDOM.render(<MyForm />, document.getElementById('root'));


In React, the selected value is defined with a "value" attribute on the "select" tag:
Example, selected value "Volvo" is initialized in the constructor:
function MyForm() {
  const [myCar, setMyCar] = useState("Volvo");

  const handleChange = (event) => {
    setMyCar(event.target.value)
  }

  return (
    <form>
      <select value={myCar} onChange={handleChange}>
        <option value="Ford">Ford</option>
        <option value="Volvo">Volvo</option>
      </select>
    </form>
  )
}


REACT ROUTER
"create-react-app" doesn't include page routing.

To add react router to your application
terminal app root level:"npm i -D react-router-dom"

Basic example.
https://www.w3schools.com/react/react_router.asp


REACT MEMO
Using "memo" will cause React to skip rendering
a component if its props have not changed.
Example:
import { memo } from "react";
const Todos = ({ todos }) => {
  console.log("child render");
  return (
    <>
      <h2>My Todos</h2>
      {todos.map((todo, index) => {
        return <p key={index}>{todo}</p>;
      })}
    </>
  );
};

export default memo(Todos);

Wrap the "Todos" component export in "memo".
Now the Todos component only re-renders when
the todos that are passed to it through props are updated.



STYLING React Using CSS
Three common ways:
- INLINE STYLING
- - the value must be a JavaScript object
- - properties with hyphen separators
must be written with camel case syntax
Example:
const Header = () => {
  const myStyle = {
    color: "white",
    backgroundColor: "DodgerBlue"
  };
  return (
    <>
      <h1 style={myStyle}>Hello Style!</h1>
      <p style={{fontFamily: "Sans-Serif"}}>Add a little style!</p>
    </>
  );
}


- CSS STYLESHEETS
- - create a new file called "App.css"
and insert some CSS code in it, as in usual css.
- - import the stylesheet in your application
Example:
import React from 'react';
import ReactDOM from 'react-dom';
import './App.css';
const Header = () => {...} // App.css style will be included
ReactDOM.render(<Header />, document.getElementById('root'));


- CSS MODULES
- - are convenient for components that
are placed in separate files
- - ends with ".module.css" extension f.e.: "my-x.module.css"
- - include usual css syntax
- - CSS inside a module is available only for
the component that imported it, and you do not have to
worry about name conflicts
Just import result in your "component" file.
Example:
import styles from './my-style.module.css'; 
const Car = () => {
  return <h1 className={styles.bigblue}>Hello Car!</h1>;
}
export default Car;


Styling React Using Sass - a CSS pre-processor.

If you use the create-react-app in your project.
Terminal: npm i sass - to install sass support

- create a Sass file, with extension ".scss"
- you can use variables started with "$"
- import to project
Example "my.scss":
$myColor: red;
h1 {color: $myColor;}
Example index.js:
...
import './my.scss';
...


REACT HOOKS
allow function components to have access to state
and other React features, so class components
are generally no longer needed.

You must "import" Hooks from "react".

Hooks work ONLY inside React FUNCTION COMPONENTS
(not work in React class components).
Hooks can only be called at the top level of a component.
Hooks cannot be conditional


"useState" HOOK allows us to track state
in a function component.
Before use, at the top of the FUNCTION COMPONENT:
-import hook "useState" using distructuring
-initialize hook by calling useState
- - useState accepts an initial state and returns two values:
- - - the current state.
- - - a function that updates the state.


Example:
import ReactDOM from "react-dom";
import { useState } from "react";
function FavoriteColor() {
  const [color, setColor] = useState("");
  return <>
    <h1>color is {color}!</h1>
    <button
          type="button"
          onClick={() => setColor("blue")}
        >Blue</button>
    </>
}
ReactDOM.render(<FavoriteColor />,
document.getElementById('root'));

- "useState("")" set the initial state to an empty string.
- [color, setColor] is destructuring of "useState" return.
- "color" is current state, "setColor" update value function
- "color" and "setColor" are variables that can be named
anything you would like.
- "return ... {color} ..." is read state
- "setColor("blue")" is update state

The "useState" Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these!

Multiple state Hooks allowed.
Example:
const [shape, setShape] = useState("circle");
const [fillColor, setFillColor] = useState("green");

Use one state and include an object allowed.
Example:
const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang"
  });


UPDATING OBJECTS and ARRAYS in State
Example of update only one parameter:
import { useState } from "react";
import ReactDOM from "react-dom";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    color: "red"
  });

  const updateColor = () => {
    setCar(previousState => {
      return { ...previousState, color: "blue" }
    });
  }

  return (
    <>
      <h1>My {car.brand} {car.color}</h1>
      <button
        type="button"
        onClick={updateColor}
      >Blue</button>
    </>
  )
}
ReactDOM.render(<Car />, document.getElementById('root'));


"useEffect" Hooks - side effects in your components.
Such as fetching data, directly updating DOM, and timers.
Some effects require cleanup to reduce memory leaks,
effects that are no longer needed should be disposed,
by including "return ()=>{...}" as last line of "useEffect" Hook.

useEffect(<function>, ?<dependency>)
https://www.w3schools.com/react/react_useeffect.asp


"useContext" Hook - used when the state should
be held by the highest parent component in the stack
that requires access to the state, without need to pass
the state as "props" through each nested component.

Example:
import { useState, createContext, useContext } from "react";
import ReactDOM from "react-dom";

const UserContext = createContext();

function Component1() {
  const [user, setUser] = useState("Jesse Hall");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello ${user}!`}</h1>
      <Component2 user={user} />
    </UserContext.Provider>
  );
}

function Component2(props) {
  return (
    <>
      <h1>Component 2 {props.user}</h1>
      <Component3 user={props.user} />
    </>
  );
}

function Component3({ user }) {
  return (
    <>
      <h1>Component 3 {user}</h1>
      <Component4 />
    </>
  );
}

function Component4() {
  return (
    <>
      <h1>Component 4</h1>
      <Component5 />
    </>
  );
}

function Component5() {
  const user = useContext(UserContext);

  return (
    <>
      <h1>Component 5</h1>
      <h2>{`Hello ${user} again!`}</h2>
    </>
  );
}

ReactDOM.render(<Component1 />, 
document.getElementById("root"));


"useRef" Hook allows you to persist values between renders.
Can be used to store a mutable value
that does not cause a re-render when updated.
Can be used to access a DOM element directly

"useRef()" only returns one item.
It returns an Object called current.

Example of "useRef" to track application renders:
import { useState, useEffect, useRef } from "react";
import ReactDOM from "react-dom";

function App() {
  const [inputValue, setInputValue] = useState("");
  const count = useRef(0);

  useEffect(() => {
    count.current = count.current + 1;
  });

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h1>Render Count: {count.current}</h1>
    </>
  );
}

ReactDOM.render(<App />, document.getElementById('root'));


Example of access element directly in the DOM using "ref":
import { useRef } from "react";
import ReactDOM from "react-dom";

function App() {
  const inputElement = useRef();
  const focusInput = () => {
    inputElement.current.focus();
  };

  return (
    <>
      <input type="text" ref={inputElement} />
      <button onClick={focusInput}>Focus Input</button>
    </>
  );
}
ReactDOM.render(<App />, document.getElementById('root'));


Example of keep track of previous state values:
import { useState, useEffect, useRef } from "react";
import ReactDOM from "react-dom";

function App() {
  const [inputValue, setInputValue] = useState("");
  const previousInputValue = useRef("");

  useEffect(() => {
    previousInputValue.current = inputValue;
  }, [inputValue]);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <h2>Current Value: {inputValue}</h2>
      <h2>Previous Value: {previousInputValue.current}</h2>
    </>
  );
}
ReactDOM.render(<App />, document.getElementById('root'));

In example the "useEffect" are updating the "useRef" current
value each time the "inputValue" is updated by entering
text into the input field.



https://reactjs.org/docs/hooks-reference.html#usereducer
"useReducer" Hook may be useful
for keeping track of multiple pieces of state.
useReducer(<reducer>, <initialState>)

The "reducer" function contains your custom state logic and the "initialState" can be a simple value but generally
will contain an object.
"useReducer" Hook returns the current "state" and
a "dispatch" method


https://reactjs.org/docs/hooks-reference.html#usecallback
"useCallback" Hook returns a memoized callback function.
This allows to isolate resource intensive functions
so that they will not automatically run on every render.
Only runs when one of its dependencies update.


https://reactjs.org/docs/hooks-reference.html#usecallback
"useMemo" Hook only runs when
one of its dependencies update.
Can optimize performance.


https://reactjs.org/docs/hooks-custom.html
https://www.w3schools.com/react/react_customhooks.asp
CUSTOM HOOKS
A custom Hook is a JavaScript function whose name
starts with ”use” and that may call other Hooks.


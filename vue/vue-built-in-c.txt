
Built-in Components

ANIMATIONS

https://vuejs.org/guide/built-ins/transition.html
<Transition> - applying animations when
an element or component is entering and leaving the DOM.


https://vuejs.org/guide/built-ins/transition-group.html
<TransitionGroup> - applying animations when
an element or component is inserted into,
removed from, or moved within a "v-for" list


https://vuejs.org/guide/extras/animation.html
Aside from these two components, we can also apply animations
in Vue using other techniques such as toggling CSS classes
or state-driven animations via style bindings.


The <Transition> Component - available in any component's
template without having to register it. It can be used to apply
enter and leave animations on elements or components passed
to it via its default slot. The enter or leave can be triggered by:
- conditional rendering via v-if
- conditional display via v-show
- dynamic components toggling via the <component> element

<Transition> only supports a single element or component
as its slot content. If the content is a component,
the component must also have only one single root element.

Example "v-if":
- template
<button @click="show = !show">Toggle</button>
<Transition>
  <p v-if="show">hello</p>
</Transition>

- css
.v-enter-active,
.v-leave-active {
  transition: opacity 0.5s ease;
}

.v-enter-from,
.v-leave-to {
  opacity: 0;
}


https://vuejs.org/guide/built-ins/transition.html#css-based-transitions
There are six classes applied for enter / leave transitions.
v-enter-from v-enter-active v-enter-to
v-leave-from v-leave-active v-leave-to

The "v-enter-active" and "v-leave-active" give us the ability
to specify different easing curves for enter / leave transitions.



A transition can be NAMED via the "name" prop:

<Transition name="fade">
  ...
</Transition>

For a named transition, its transition classes will be prefixed
with its name instead of "v", F.e. CSS for the transition
named "fade" should look like this:

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}


Transitions MULTIPLE PROPERTIES, with
different durations and easing curves for "enter" and "leave":

- template
<Transition name="slide-fade">
  <p v-if="show">hello</p>
</Transition>

- css
.slide-fade-enter-active {
  transition: all 0.3s ease-out;
}

.slide-fade-leave-active {
  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);
}

.slide-fade-enter-from,
.slide-fade-leave-to {
  transform: translateX(20px);
  opacity: 0;
}


For most CSS animations, we can simply declare
them under the "*-enter-active" and "*-leave-active" classes.

<Transition name="bounce">
  <p v-if="show" style="text-align: center;">
    Hello here is some bouncy text!
  </p>
</Transition>

.bounce-enter-active {
  animation: bounce-in 0.5s;
}
.bounce-leave-active {
  animation: bounce-in 0.5s reverse;
}
@keyframes bounce-in {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.25);
  }
  100% {
    transform: scale(1);
  }
}


You can also specify custom transition classes
by passing the following props to <Transition>:
enter-from-class enter-active-class enter-to-class
leave-from-class leave-active-class leave-to-class

These will override the conventional class names.
This is especially useful when you want to combine
Vue's transition system with an existing CSS animation library.


Using Transitions and Animations Together
To having a CSS animation triggered by Vue, along with
a CSS transition effect on hover, you will have to explicitly
declare the type you want Vue to care about by passing
the "type" prop, with a value of either "animation" or "transition":

<Transition type="animation">...</Transition>


https://vuejs.org/guide/built-ins/transition.html#nested-transitions-and-explicit-transition-durations
Nested Transitions and Explicit Transition Durations



To specify separate values for
enter and leave durations using an object:
<Transition :duration="{ enter: 500, leave: 800 }">...</Transition>

The properties like "height" or "margin" will trigger CSS layout,
so they are much more expensive to animate,
and should be used with caution.



JavaScript Hooks on the <Transition> component:

<Transition
  @before-enter="onBeforeEnter"
  @enter="onEnter"
  @after-enter="onAfterEnter"
  @enter-cancelled="onEnterCancelled"
  @before-leave="onBeforeLeave"
  @leave="onLeave"
  @after-leave="onAfterLeave"
  @leave-cancelled="onLeaveCancelled"
>
  <!-- ... -->
</Transition>

export default {
  // ...
  methods: {
    // called before the element is inserted into the DOM.
    // use this to set the "enter-from" state of the element
    onBeforeEnter(el) {},

    // called one frame after the element is inserted.
    // use this to start the animation.
    onEnter(el, done) {
      // call the done callback to indicate transition end
      // optional if used in combination with CSS
      done()
    },

    // called when the enter transition has finished.
    onAfterEnter(el) {},
    onEnterCancelled(el) {},

    // called before the leave hook.
    // Most of the time, you shoud just use the leave hook.
    onBeforeLeave(el) {},

    // called when the leave transition starts.
    // use this to start the leaving animation.
    onLeave(el, done) {
      // call the done callback to indicate transition end
      // optional if used in combination with CSS
      done()
    },

    // called when the leave transition has finished and the
    // element has been removed from the DOM.
    onAfterLeave(el) {},

    // only available with v-show transitions
    leaveCancelled(el) {}
  }
}

These hooks can be used in combination
with CSS transitions / animations or on their own.

When using JavaScript-only transitions, it is usually a good idea
to add the :css="false" prop, to tells Vue to skip auto CSS
transition detection, and prevents CSS rules from accidentally
interfering with the transition.

<Transition ... :css="false" > ... </Transition>


https://vuejs.org/guide/built-ins/transition.html#reusable-transitions
Reusable Transitions - using <slot>

<!-- MyTransition.vue -->
<script>
// JavaScript hooks logic...
</script>

<template>
  <!-- wrap the built-in Transition component -->
  <Transition
    name="my-transition"
    @enter="onEnter"
    @leave="onLeave">
    <slot></slot> <!-- pass down slot content -->
  </Transition>
</template>

<style>
/*
  Necessary CSS...
  Note: avoid using <style scoped> here since it
  does not apply to slot content.
*/
</style>

...now can be imported and used just like the built-in version:

<MyTransition>
  <div v-if="show">Hello</div>
</MyTransition>


Add "appear" to apply a transition on the initial render of node:
<Transition appear> ... </Transition>



Transition Between Elements - using v-if v-else v-else-if:
<Transition>
  <button v-if="docState === 'saved'">Edit</button>
  <button v-else-if="docState === 'edited'">Save</button>
  <button v-else-if="docState === 'editing'">Cancel</button>
</Transition>


Transition Between (dynamic) Components
with "mode" to wait end of first transition completed

<Transition name="fade" mode="out-in">
  <component :is="activeComponent"></component>
</Transition>


<Transition> props like "name" can also be dynamic:

<Transition :name="transitionName"> <!-- ... --> </Transition>

...useful to switch between transitions/animations.



<TransitionGroup> supports the same props, CSS transition
classes, and JavaScript hook listeners as <Transition>, with
the following differences:

- by default, it doesn't render a wrapper element. But you can
specify an element to be rendered with the "tag" prop.

- transition MODEs are NOT available, because we are
no longer alternating between mutually exclusive elements.

- elements inside are always required to
have a unique "key" attribute.

- CSS transition classes will be applied to individual elements
in the list, not to the group / container itself.

When used in DOM templates,
it should be referenced as <transition-group>.

- template
<TransitionGroup name="list" tag="ul">
  <li v-for="item in items" :key="item">
    {{ item }}
  </li>
</TransitionGroup>

- css
.list-enter-active,
.list-leave-active {
  transition: all 0.5s ease;
}
.list-enter-from,
.list-leave-to {
  opacity: 0;
  transform: translateX(30px);
}



Use <KeepAlive> built-in component to conditionally cache
component instances when dynamically
switching between multiple components.

To keep state/value cached between switched components use:
<KeepAlive>
  <component :is="activeComponent" />
</KeepAlive>


https://vuejs.org/guide/built-ins/keep-alive.html#include-exclude
Include / Exclude - to control which components cached

<!-- comma-delimited string -->
<KeepAlive include="a,b">
  <component :is="view"></component>
</KeepAlive>

<!-- regex (use `v-bind`) -->
<KeepAlive :include="/a|b/">
  <component :is="view"></component>
</KeepAlive>

<!-- Array (use `v-bind`) -->
<KeepAlive :include="['a', 'b']">
  <component :is="view"></component>
</KeepAlive>

...where f.e. "a" and "b" is checked components "name"


Limit the maximum number of component instances
that can be cached use <KeepAlive :max="10">

A kept-alive component can register lifecycle hooks
for two states:

export default {
  activated() {
    // called on initial mount
    // and every time it is re-inserted from the cache
  },
  deactivated() {
    // called when removed from the DOM into the cache
    // and also when unmounted
  }
}

Both hooks work for root and descendent cached components.



<Teleport> - allows to "teleport" a part of a component's
template into a DOM node that exists outside the DOM
hierarchy of that component.

<Teleport to="body">
  <div v-if="open" class="modal">
    <p>Hello from the modal!</p>
    <button @click="open = false">Close</button>
  </div>
</Teleport>

...will teleport this template fragment to "body" tag,
f.e. as modal window.

Combine <Teleport> with <Transition>
to create animated modals.

If <Teleport> contains a component, that component will
remain a logical child of the parent component containing
the <Teleport>. Props passing and event emitting
will continue to work the same way.

To conditionally disable <Teleport :disabled="isMobile">


Multiple Teleports on the Same Target
- template
<Teleport to="#modals"> <div>A</div> </Teleport>
<Teleport to="#modals"> <div>B</div> </Teleport>
- rendered result
<div id="modals"> <div>A</div> <div>B</div> </div>



https://vuejs.org/guide/built-ins/suspense.html#suspense
EXPERIMENTAL
<Suspense> is a built-in component for orchestrating async
dependencies in a component tree. It can render a loading
state while waiting for multiple nested async dependencies
down the component tree to be resolved.

<Suspense> will switch to fallback content if it takes longer
than "timeout" property to render the new default content.
A timeout value of 0 will cause the fallback content to be
displayed immediately when default content is replaced.

The <Suspense> component emits 3 events:
pending, resolve, fallback

<Suspense> currently does not provide error handling via the
component itself - however, you can use the errorCaptured
option or the onErrorCaptured() hook to capture and handle
async errors in the parent component of <Suspense>



Combining with Other Components
Often used with Vue Router.
Example shows how to nest these components so that they
all behave as expected. Remove not needed as you want.

<RouterView v-slot="{ Component }">
  <template v-if="Component">
    <Transition mode="out-in">
      <KeepAlive>
        <Suspense>
          <!-- main content -->
          <component :is="Component"></component>

          <!-- loading state -->
          <template #fallback>
            Loading...
          </template>
        </Suspense>
      </KeepAlive>
    </Transition>
  </template>
</RouterView>



SCALING UP

Single-File Components - *.vue files, abbreviated as SFC.

The <template>, <script>, and <style> blocks encapsulates
and collocates the view, logic and styling of a component
in the same file.

The SFC way requires a build step.

With proper build setup you can import an SFC as module:

import MyComponent from './MyComponent.vue'

export default {
  components: {
    MyComponent
  }
}





Component Registration

Vue component needs to be "registered" two ways

- GLOBAL using ".component" method:
- - in app implementation
import { createApp } from 'vue'
const app = createApp({})
app.component(
  // the registered name
  'MyComponent',
  // the implementation
  {
    /* ... */
  }
)

- - using SFCs
import MyComponent from './App.vue'
app.component('MyComponent', MyComponent)

The "app.component()" method can be chained:

app
  .component('ComponentA', ComponentA)
  .component('ComponentB', ComponentB)

Globally registered components available in any template of app
<!-- this will work in any component inside the app -->
<ComponentA/>
<ComponentB/>
<ComponentC/>

Global registration prevents build systems from removing unused components.
Global registration in large applications makes it difficult to locate
a child component's implementation from a parent component.


- LOCAL - scopes the availability of the registered components
to the current component only
Local registration is done using the "components" option.

<script>
import ComponentA from './ComponentA.vue'

export default {
  components: {
    ComponentA
  }
}
</script>

<template>
  <ComponentA />
</template>

Locally registered components are not also available
in descendent components. In this case, ComponentA
will be made available to the current component only,
not any of its child or descendent components.

Use the PascalCase names when registering components.

A component registered as MyComponent can be referenced
in the template via both <MyComponent> and <my-component>.


Props - declared using the "props" option.

export default {
  props: ['foo'],
  created() {
    // props are exposed on `this`
    console.log(this.foo)
  }
}

also using the object syntax:

export default {
  props: {
    title: String,
    likes: Number
  }
}

Declare long prop names using camelCase.

Passing Different Value Types and "v-bind" short hand ":" :

Number
<BlogPost :likes="42" />
<BlogPost :likes="post.likes" />

Boolean
<!-- Including the prop with no value will imply `true`. -->
<BlogPost is-published />

<!-- Even if `false` is static, need v-bind to tell Vue that -->
<!-- JavaScript expression rather than a string. -->
<BlogPost :is-published="false" />

<!-- Dynamically assign to the value of a variable. -->
<BlogPost :is-published="post.isPublished" />

Array
<BlogPost :comment-ids="[234, 266, 273]" />
<BlogPost :comment-ids="post.commentIds" />

Object
<BlogPost
  :author="{
    name: 'Veronica',
    company: 'Veridian Dynamics'
  }"
 />
<BlogPost :author="post.author" />


Binding Multiple Properties Using an Object 

export default {
  data() {
    return {
      post: {
        id: 1,
        title: 'My Journey with Vue'
      } } } }

<BlogPost v-bind="post" />

Will be equivalent to:

<BlogPost :id="post.id" :title="post.title" />


One-Way Data Flow - when the parent property updates,
it will flow down to the child, but not the other way around.

You should not attempt to mutate a prop inside a child
component, or Vue warn you in the console.


To use/mutate a prop inside child properly:
- define a local data property that uses the prop as its initial value:

export default {
  props: ['initialCounter'],
  data() {
    return {
      // counter only uses this.initialCounter as the initial value;
      // it is disconnected from future prop updates.
      counter: this.initialCounter
    }
  }
}

- define a computed property using the prop's value, if prop
is passed in as a raw value that needs to be transformed:

export default {
  props: ['size'],
  computed: {
    // computed property autoupdated when the prop changes
    normalizedSize() {
      return this.size.trim().toLowerCase()
    }
  }
}


Mutating  object/array props is possible, as usual in javascript.
You should avoid such mutations unless the parent and child
are tightly coupled by design. In most cases, the child should
emit an event to let the parent perform the mutation.



https://vuejs.org/guide/components/props.html#prop-validation
Prop validation

Components can specify requirements for their props,
such as the types you've already seen.
If a requirement is not met, in development mode,
Vue will warn you in the browser's JavaScript console.

export default {
  props: {
    // Basic type check
    //  (`null` and `undefined` values will allow any type)
    propA: Number,
    // Multiple possible types
    propB: [String, Number],
    // Required string
    propC: {
      type: String,
      required: true
    },
    // Number with a default value
    propD: {
      type: Number,
      default: 100
    },
    // Object with a default value
    propE: {
      type: Object,
      // Object or array defaults must be returned from
      // a factory function. The function receives the raw
      // props received by the component as the argument.
      default(rawProps) {
        // default function receives the raw props object as argument
        return { message: 'hello' }
      }
    },
    // Custom validator function
    propF: {
      validator(value) {
        // The value must match one of these strings
        return ['success', 'warning', 'danger'].includes(value)
      }
    },
    // Function with a default value
    propG: {
      type: Function,
      // Unlike object or array default, this is not a factory function - this is a function to serve as a default value
      default() {
        return 'Default function'
      }
    }
  }
}

- All props are optional by default,
unless required: true is specified.
- An absent optional prop will have undefined value.
- If a default value is specified, it will be used if the resolved
prop value is undefined - this includes both when the prop is
absent, or an explicit undefined value is passed.



Runtime Type Checks

The type can be one of the following native constructors:
String Number Boolean Array Object Date Function Symbol

In addition, "type" can also be a custom class or constructor
function and the assertion will be made with an "instanceof"
check. For example, given the following class:

class Person {
  constructor(firstName, lastName) {
    this.firstName = firstName
    this.lastName = lastName
  }
}

You could use it as a prop's type:

export default {
  props: {
    author: Person
  }
}

to validate that the value of the "author" prop
was created with "new Person".



Boolean Casting - has special casting rules.

export default {
  props: {
    disabled: Boolean
  }
}

The component can be used like this:

<!-- equivalent of passing :disabled="true" -->
<MyComponent disabled />

<!-- equivalent of passing :disabled="false" -->
<MyComponent />

When a prop is declared to allow multiple types, e.g.

export default {
  props: {
    disabled: [Boolean, Number]
  }
}

The casting rules for Boolean will apply regardless
of type appearance order.


https://vuejs.org/guide/components/events.html#emitting-and-listening-to-events
Emitting and Listening to Events

<button @click="$emit('someEvent')">click me</button>

The "$emit()" function is also available
on the component instance as "this.$emit()".

The parent can then listen to it using "v-on":

<MyComponent @some-event="callback" />

The ".once" modifier is also supported
on component event listeners:

<MyComponent @some-event.once="callback" />

Like components and props, event names provide
an automatic case transformation.
Notice we emitted a camelCase event, but can listen for it
using a kebab-cased listener in the parent.
Use kebab-cased event listeners in templates.

At least is recommended to define all emitted events
in order to better document how a component should work.


Similar to prop type validation, an emitted event can be
validated if it is defined with the object syntax
instead of the array syntax.

export default {
  emits: {
    // No validation
    click: null,

    // Validate submit event
    submit: ({ email, password }) => {
      if (email && password) {
        return true
      } else {
        console.warn('Invalid submit event payload!')
        return false
      }
    }
  },
  methods: {
    submitForm(email, password) {
      this.$emit('submit', { email, password })
    }
  }
}


https://vuejs.org/guide/components/events.html#usage-with-v-model
Usage with v-model - as shorthand with complex functionality



https://vuejs.org/guide/components/attrs.html#fallthrough-attributes
Disabling Attribute Inheritance - when component based on other
If you want a component do not automatically inherit attributes,
you can set inheritAttrs: false in the component's options.

These fallthrough attributes can be accessed directly in template expressions as $attrs:
Unlike props, fallthrough attributes preserve their original casing
in JavaScript, so an attribute like foo-bar needs to be accessed
as $attrs['foo-bar'].
A "v-on" event listener like "@click" will be exposed on the object as a function under "$attrs.onClick".

The "v-bind" without an argument binds all the properties
of an object as attributes of the target element.


Attribute Inheritance on Multiple Root Nodes
do not have an automatic attribute fallthrough behavior.
If $attrs are not bound explicitly, warning will be issued.

The warning will be suppressed if $attrs is explicitly bound:

<header>...</header>
<main v-bind="$attrs">...</main>
<footer>...</footer>


Accessing Fallthrough Attributes in JavaScript

export default {
  created() {
    console.log(this.$attrs)
  }
}



https://vuejs.org/guide/components/slots.html
SLOT - indicates where the parent-provided slot content
should be rendered.

"v-slot" shorthand is "#" so <template v-slot:header>
can be shortened to just <template #header>.

Named slot <slot name="footer"></slot>
A <slot> outlet without name implicitly has the name "default".

Dynamic directive arguments also work on "v-slot"
<template v-slot:[dynamicSlotName]>


Pass attributes to a slot outlet just like
passing props to a component:

<!-- <MyComponent> template -->
<div>
  <slot :text="greetingMessage" :count="1"></slot>
</div>


Renderless Components - only encapsulate logic
and do not render anything by themselves - visual output
is fully delegated to the consumer component with scoped slots.

<MouseTracker v-slot="{ x, y }">
  Mouse is at: {{ x }}, {{ y }}
</MouseTracker>



Prop Drilling - to send props straight to deep child
use "provide" and "inject".


PROVIDE

To provide data to a component's descendants:

export default {
  provide: {
    message: 'hello!'
  }
}

To provide per-instance state, for example data declared
via the data(), then provide must use a function value:

export default {
  data() {
    return {
      message: 'hello!'
    }
  },
  provide() {
    // use function syntax so that we can access `this`
    return {
      message: this.message
    } } }

This does NOT make the injection reactive.


To providing data in a component, provide at the app level:

import { createApp } from 'vue'
const app = createApp({})
app.provide(/* key */ 'message', /* value */ 'hello!')

App-level provides are available to all components rendered
in the app. This is especially useful when writing plugins.


INJECT

To inject data provided by an ancestor component:

export default {
  inject: ['message'],
  created() { console.log(this.message) // injected value }
}


Access injected properties in data():

export default {
  inject: ['message'],
  data() {
    return {
      // initial data based on injected value
      fullMessage: this.message
    } } }


INJECTION ALIASING
To inject the property using a different local key:

export default {
  inject: {
    /* local key */ localMessage: {
      from: /* injection key */ 'message'
    } } }

A property provided with the key "message",
exposed as "this.localMessage".


INJECTION DEFAULT VALUES
To make an injected property work with optional providers,
declare a default value(object syntax is required):

export default {
  inject: {
    message: {
      from: 'message', //optional if using the same key for injection
      default: 'default value'
    },
    user: {
      // use a factory function for non-primitive values that are expensive
      // to create, or ones that should be unique per component instance.
      default: () => ({ name: 'John' })
    } } }


WORKING WITH REACTIVITY

to make injections reactively linked to the provider,
use a "computed()" function:

import { computed } from 'vue'

export default {
  data() {
    return {
      message: 'hello!'
    }
  },
  provide() {
    return {
      // explicitly provide a computed property
      message: computed(() => this.message)
    } } }

The "computed()" function is typically used
in Composition API components, but can also be used to
complement certain use cases in Options API.

The "app.config.unwrapInjectedRef = true"
required to make injections auto unwrap computed refs,
will become to default in Vue 3.3+.




Working with Symbol Keys
If you are authoring components that are going to be used
by other developers, use Symbol injection keys
to avoid potential collisions.

Recommended to export the Symbols in a dedicated file:

// keys.js
export const myInjectionKey = Symbol()

// in provider component, js
import { myInjectionKey } from './keys.js'
export default {
  provide() {
    return {
      [myInjectionKey]: {
        /* data to provide */
      } } } }

// in injector component, js
import { myInjectionKey } from './keys.js'

export default {
  inject: {
    injected: { from: myInjectionKey }
  } }



https://vuejs.org/guide/components/async.html#async-components
ASYNC COMPONENTS

To divide the app into smaller chunks and
load a component from the server when it's needed
use "defineAsyncComponent" function.

import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() => {
  return new Promise((resolve, reject) => {
    // ...load component from server
    resolve(/* loaded component */)
  })
})
// ... use `AsyncComp` like a normal component

Bundlers like Vite and webpack also support the syntax,
so use it to import Vue SFCs:

import { defineAsyncComponent } from 'vue'

const AsyncComp = defineAsyncComponent(() =>
  import('./components/MyComponent.vue')
)


Also use "defineAsyncComponent" when registering
a component locally:

import { defineAsyncComponent } from 'vue'

export default {
  // ...
  components: {
    AsyncComponent: defineAsyncComponent(() =>
      import('./components/AsyncComponent.vue')
    )
  } }



Loading and Error States as "defineAsyncComponent()"
advanced options

const AsyncComp = defineAsyncComponent({
  // the loader function
  loader: () => import('./Foo.vue'),

  // A component to use while the async component is loading
  loadingComponent: LoadingComponent,
  // Delay before showing the loading component. Default: 200ms.
  delay: 200,

  // A component to use if the load fails
  errorComponent: ErrorComponent,
  // The error component will be displayed if a timeout is
  // provided and exceeded. Default: Infinity.
  timeout: 3000
})

Async components can be used with the
<Suspense> built-in component.



REUSABILITY - only for composition API way.

https://vuejs.org/guide/reusability/composables.html
COMPOSABLES
It is a convention to name composable functions
with camelCase names that start with "use".

it's a good idea to handle the case of input arguments
being refs instead of raw values. The "unref()" utility function
will come in handy for this purpose:

import { unref } from 'vue'

function useFeature(maybeRef) {
  // if maybeRef is indeed a ref, its .value will be returned
  // otherwise, maybeRef is returned as-is
  const value = unref(maybeRef)
}

Composables should only be called synchronously
in <script setup> or the setup() hook. In some cases,
you can also call them in lifecycle hooks like onMounted().

<script setup> is the only place where you can call
composables after usage of await.
The compiler automatically restores the active instance
context after the async operation for you.

Composition API gives you the full flexibility to organize your component code into smaller functions based on logical concerns:

<script setup>
import { useFeatureA } from './featureA.js'
import { useFeatureB } from './featureB.js'

const { foo, bar } = useFeatureA()
const { baz } = useFeatureB(foo)
</script>



Using Composables in Options API.

In Options API, composables must be called inside setup(),
and the returned bindings must be returned from setup()
so that they are exposed to this and the template:

import { useMouse } from './mouse.js'
import { useFetch } from './fetch.js'

export default {
  setup() {
    const { x, y } = useMouse()
    const { data, error } = useFetch('...')
    return { x, y, data, error }
  },
  mounted() {
    // setup() exposed properties can be accessed on `this`
    console.log(this.x)
  }
  // ...other options
}

The main advantage of composables over renderless
components is that composables do not incur the extra
component instance overhead.

The recommendation is to use composables when reusing
pure logic, and use components when reusing both
logic and visual layout.



Custom Directives

- js
const focus = {
  mounted: (el) => el.focus()
}

- template
export default {
  directives: {
    // enables v-focus in template
    focus
  }
}

<input v-focus />

... directive also works when the element
is dynamically inserted by Vue.


To GLOBALLY register custom directives at the app level:

const app = createApp({})
// make v-focus usable in all components
app.directive('focus', { /* ... */ })


Directive Hooks

const myDirective = {
  // called before bound element's attributes
  // or event listeners are applied
  created(el, binding, vnode, prevVnode) {
    // see below for details on arguments
  },
  // called right before the element is inserted into the DOM.
  beforeMount() {},
  // called when the bound element's parent component
  // and all its children are mounted.
  mounted() {},
  // called before the parent component is updated
  beforeUpdate() {},
  // called after the parent component and
  // all of its children have updated
  updated() {},
  // called before the parent component is unmounted
  beforeUnmount() {},
  // called when the parent component is unmounted
  unmounted() {}
  }
}


https://vuejs.org/guide/reusability/custom-directives.html#hook-arguments
Hook Arguments

- el: the element the directive is bound to.
This can be used to directly manipulate the DOM.
- binding: an object containing the properties(link above).
- vnode: the underlying VNode representing the bound element.
- prevNode: the VNode representing the bound element
from the previous render.
Only available in the "beforeUpdate" and "updated" hooks.

Example:
- template
<div v-example:foo.bar="baz">

The binding argument would be an object in the shape of:
- js
{
  arg: 'foo',
  modifiers: { bar: true },
  value: /* value of `baz` */,
  oldValue: /* value of `baz` from previous update */
}

Custom directive arguments can be dynamic:
- template
<div v-example:[arg]="value"></div>

...here the directive argument will be reactively updated
based on arg property in our component state.

Apart from "el", you should treat these arguments as READ-ONLY
and never modify them. If you need to share information across
hooks, it is recommended to do so through element's dataset.


Function Shorthand

A custom directive have the same behavior for
"mounted" and "updated", with no need for the other hooks.
So, to define the directive as a function:

<div v-color="color"></div>

app.directive('color', (el, binding) => {
  // this will be called for both `mounted` and `updated`
  el.style.color = binding.value
})


Object Literals - to pass multiple values

Directives can take any valid JavaScript expression.
<div v-demo="{ color: 'white', text: 'hello!' }"></div>

app.directive('demo', (el, binding) => {
  console.log(binding.value.color) // => "white"
  console.log(binding.value.text) // => "hello!"
})


When used on COMPONENTS, custom directives will always
apply to a component's root node, similar to Fallthrough Attributes.
- template
<MyComponent v-demo="test" />

- template
<!-- template of MyComponent -->

<div> <!-- v-demo directive will be applied here -->
  <span>My component content</span>
</div>


Unlike attributes, directives can't be passed to a different element
with v-bind="$attrs". In general, it is NOT recommended
to use custom directives on components.



Plugins - self-contained code that usually add app-level functionality.

install a plugin:
import { createApp } from 'vue'

const app = createApp({})

app.use(myPlugin, {
  /* optional options */
})


A plugin is defined as either an object that exposes an install()
method, or simply a function that acts as the install function itself.
The install function receives the app instance along
with additional options passed to app.use(), if any:

const myPlugin = {
  install(app, options) {
    // configure the app
  }
}


Common scenarios where plugins are useful:
- register 1+ global components or custom directives
with app.component() and app.directive().

- make a resource injectable throughout the app
by calling "app.provide()".

- add some global instance properties or methods
by attaching them to "app.config.globalProperties".

- a library that needs to perform some combination of the above


https://vuejs.org/guide/reusability/plugins.html#writing-a-plugin
Writing a Plugin

https://vuejs.org/guide/reusability/plugins.html#provide-inject-with-plugins
Plugins also allow us to use "inject" to provide
a function or attribute to the plugin's users.

